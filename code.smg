# SMG Test Code!
# Run this whenever a change is made to any part of the Interpreter.
# Make sure to give the instance a definition for print and println!
try { print() } catch (e) { "print() is not defined! Aborting."; break; }
try { println() } catch (e) { "println() is not defined! Aborting."; break; }

# Declarations
let x = 1
let y

print("Declaration Test -> ")
println("x =", x, "y =", y)

# If Statement
print("If Statement Test -> ")
let item = 7
if (item > 5) { 
    println(item, "> 5") 
}
else if (item > 1) {
    println(item, "> 1") 
}
else if (item) { 
    println(item, "= 1") 
}
else { 
    println(item, "= 0") 
}

# While Loops
print("While Loop Test -> ")
let i = 0
let names = ["Saif", "Kyle", "Joseph"]
while (i < names.size) {
    print("%d." % (i + 1), names[i], "")
    i += 1
}
println()

# For Loop
print("For Each Loop Test -> ")
let alpha = 'A' as char
for (name in names) {
    print("%s." % alpha, name, "")
    alpha += 1
}
println()

# Jump Statements
# All of the following should output '0 1 3 4'
print("For Loop Test (with jumps) -> ")
for (let j = 0; j < 10; j += 1) {
    if (j == 2) { 
        continue 
    }
    else if (j == 5) { 
        break 
    }
    print(j,"")
}
println()

print("For Each Loop Test (with jumps) -> ")
for (j in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) {
    if (j == 2) { continue }
    else if (j == 5) { break }
    print(j,"")
}
println()

print("While Loop Test (with jumps) -> ")
let j = 0
while (j < 10) {
    if (j == 2) { j += 1; continue; }
    else if (j == 5) { break }
    print(j,"")
    j += 1
}
println()

# Functions
print("Fibonacci Function Test -> ")
function fibonacci(n) {
    let a = 0; let b = 1; let c = 0;
    let max = 50
    while (true) {
        if (c >= n or c > max) { break }
        let temp = a + b
        a = b; b = temp; c += 1
    }

    return a;
    print("OH NO!!")
}

for (let i = 0; i < 10; i += 1) {
    print(fibonacci(i),"")
}
println()

print("Iterator Function Test -> ")
function iterate(list) {
    let _i = {idx: 0}
    return {
        next: fn () {
            if (_i.idx >= list.size) { return null }
            _i.idx += 1; return list[_i.idx - 1]
        },
        hasNext: function() (_i.idx < list.size)
    }
}

for (let itr = iterate([5, 7, 2, 8,]); itr.hasNext();) { print(itr.next(), "") }

println()

println("Lambda Tests")
println("8 * 9 =", (function (a) a * 8)(9))
println("7 * 4 =", (function (a) {return a * 7})(4))

let woah = function (x) function (y) x * y
println("12 * 13 = ", woah(12)(13)) # = 156

let what = function (job = "developer", name = "SMG") ({
    name: name, job: job
})

println("Default Argument Tests")
println("arg ->", what("engineer"))
println("no arg ->", what())

# Try Catch
print("Try without catch -> ")
let success = "pass"
try {
    print(1 / 0)
    success = "fail"
}
println(success)

print("Try with catch -> ")
try {
    let deep = null ["love"]
    println("fail")
}
catch e {
    println("success! caught:", e)
}

print("Try with finally -> ")
try {
    let deep = null ["love"]
    print("fail, ")
}
catch (e) {
    print("caught, ")
}
finally {
    println("finally.")
}

# Scopes and Shadowing
println("Scopes and Shadowing Test (Result should be %s, 10, 100, 1000, 1000, 10)" % x)
print("Result -> %s, " % x)
{
    let x = 10; print("%s, " % x)
    {
        let x = 100; print("%s, " % x)
        {
            x = 1000; print("%s, " % x)
        }
        print("%s, " % x)
    }
    print("%s" % x)
}
println()


# Assignments
print("Assignment Operator Tests -> ")
let p = function(s) print(s, "")
let num = 12; p(num); num -= 2; p(num); num += 15; p(num); num /= 5; p(num); num *= 7; p(num); num %= 4; p(num)
let bool = true; p(bool); bool |= false; p(bool); bool &= false; p(bool)

# We have a little fun
# println("Print Self:\n " + parser())

# lxy.xy
# function(x) function (y) x(y)

# Church Numerals
let zero = λ (z) λ (s) z
let one = λ (z) λ (s) s (z)
let two = λ (z) λ (s) s (s (z))
let three = λ (z) λ (s) s (s (s (z)))

let succ = λ (n) λ (f) λ (x) f (n (f) (x))
let four = succ (three)
let five = succ (four)
let six = succ (five)
let seven = succ (six)
let eight = succ (seven)
let nine = succ (eight)

let add = λ (m) λ (n) λ (f) λ (x) m (f) (n (f) (x))
let mult = λ (m) λ (n) m (add (n)) (zero)
let exp = λ (b) λ (e) e (b)
let view = λ (n) n (λ (x) x + 1) (0)

println("\nLambda Calculus Experiment")
println("one =", view (one))
println("two =", view (two))
println("three =", view (three))
println("four =", view (four))
println("four + three =", view (add (four) (three)))
println("four * three =", view (mult (four) (three)))
println("four ^ three =", view (exp (four) (three)))

# let adder = fn (m) fn (n) fn (z) fn (s) n(m(z)(s))(s)
# print(adder(two)(three)(0)(view))
